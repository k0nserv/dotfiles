set nocompatible               " be eMproved
filetype off                   " required!

" vim-plug
call plug#begin('~/.vim/plugged')

" Language Support
Plug 'cakebaker/scss-syntax.vim'
Plug 'vim-scripts/indentpython.vim'
Plug 'vim-ruby/vim-ruby'
Plug 'keith/swift.vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'plasticboy/vim-markdown'
Plug 'rust-lang/rust.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'udalov/kotlin-vim'
Plug 'uarun/vim-protobuf'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'jparise/vim-graphql'

" Misc
Plug 'w0rp/ale'
Plug 'kyazdani42/nvim-tree.lua'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-airline/vim-airline'
Plug 'airblade/vim-gitgutter'
Plug 'editorconfig/editorconfig-vim'
Plug 'rizzatti/dash.vim'
Plug 'glepnir/dashboard-nvim'
Plug 'alexghergh/nvim-tmux-navigation'
Plug 'numtostr/FTerm.nvim'

Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-cmp', { 'branch': 'main' }
Plug 'hrsh7th/cmp-nvim-lsp', { 'branch': 'main' }
Plug 'hrsh7th/cmp-buffer', { 'branch': 'main' }
Plug 'folke/lsp-colors.nvim', { 'branch': 'main' }

" Altar of tpope
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

Plug 'junegunn/goyo.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" Color Schemes
" Plug 'altercation/vim-colors-solarized'
Plug 'lifepillar/vim-solarized8/'
Plug 'arcticicestudio/nord-vim'
call plug#end()

set encoding=utf8
set number relativenumber
set shell=/usr/local/bin/zsh
syntax on
filetype plugin indent on
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set backspace=indent,eol,start
set noswapfile
set cursorline
set nocursorcolumn
set t_Co=256
set background=dark
set termguicolors
" autocmd vimenter * ++nested colorscheme solarized8_flat
set smartcase
set lazyredraw
let mapleader = ' '
colorscheme nord
set list
set listchars=eol:¬,trail:·
" Turn off modelines
set modelines=0
set nomodeline
highlight Comment cterm=italic gui=italic

" Remap
vnoremap . :norm.<CR>
inoremap jk <ESC>
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>z :wq<CR>

vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

nnoremap <Leader>s :sv<CR>
nnoremap <Leader>v :vs<CR>

" Windows
" nnoremap <C-J> <C-W><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>

" Buffers
set hidden

set ruler
set colorcolumn=120

set foldmethod=syntax


au TextYankPost * silent! lua vim.highlight.on_yank()

" Editor config
let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" Dashboard
let g:dashboard_default_executive ='fzf'

" Python
let g:loaded_python_provider = 1
let g:python3_host_prog = '/Users/hugotunius/Envs/nvim/bin/python3'

" vim-airline
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
      let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
" let g:airline_theme = 'powerlineish'
set laststatus=2
let g:airline#extensions#tabline#buffer_idx_mode = 1

nmap <leader>bb :Buffer<cr>
nmap <C-P> :Files<CR>


" deoplete
let g:deoplete#enable_at_startup = 1
nmap <silent> <leader>k <plug>DeopleteRustShowDocumentation

let g:deoplete#sources#rust#racer_binary='/Users/hugotunius/.cargo/bin/racer'
let g:deoplete#sources#rust#rust_source_path='$RUST_SRC_PATH'
let g:deoplete#sources#rust#disable_keymap=1
let g:deoplete#sources#rust#documentation_max_height=20

let g:deoplete#sources#ternjs#docs = 1

inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"


" Strip whitespace on save
" autocmd BufWritePre * :%s/\s\+$//e


" nvim_tree
nnoremap <F8> :NvimTreeToggle<CR>
let g:nvim_tree_special_files = { 'README.md': 1, 'Makefile': 1, 'MAKEFILE': 1 } " List of filenames that gets highlighted with NvimTreeSpecialFile
let g:nvim_tree_show_icons = {
    \ 'git': 1,
    \ 'folders': 1,
    \ 'files': 1,
    \ 'folder_arrows': 0,
    \ }
let g:nvim_tree_disable_window_picker = 0

" Dash
nmap <silent> <leader>d <Plug>DashSearch
nmap <silent> <leader>D <Plug>DashGlobalSearch

" vim-jsx
let g:jsx_ext_required = 0
let g:javascript_plugin_flow = 1


" Ale
"let g:ale_python_flake8_args="flake8"
let g:airline#extensions#ale#enabled = 1
let g:ale_linters = {
\   'python': ['flake8'],
\   'javascript': ['eslint', 'flow-language-server'],
\}
let g:ale_fixers = {
\   'javascript': ['eslint'],
\   'css': ['stylelint'],
\   'scss': ['stylelint'],
\}
let g:ale_fix_on_save = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error='✘'
let g:ale_sign_warning='▲'

let g:ale_echo_msg_error_str = '✘'
let g:ale_echo_msg_warning_str = '▲'
let g:ale_echo_msg_format = '%severity% [%linter%] %s'

let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']

let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_enter = 1
let g:ale_open_list = 0
let g:ale_history_log_output=1
nmap <silent> <C-a> :ALEDetail<CR>

let g:vim_markdown_folding_disabled = 1

" Fugitive
nmap <leader>gb :Git blame<CR>
nmap <leader>gs :Git status<CR>
nmap <leader>gd :Git diff<CR>
nmap <leader>gc :Git commit<CR>
nmap <leader>gp :Git push<CR>
nmap <leader>gl :Git pull<CR>
nmap <leader>gh :GBrowse<CR>


augroup ft_rb
    au!
    " fix the SLOOOW syntax highlighting
    au FileType ruby setlocal re=1 foldmethod=manual nocursorline
augroup END

" Rust
let g:rustfmt_autosave = 1
let g:rustfmt_emit_files = 1
let g:rust_cargo_check_tests = 1

" From https://statico.github.io/vim3.html
function! ProseMode()
  call goyo#execute(0, [])
  set spell noci nosi noai nolist noshowmode noshowcmd
  set spelllang=en_gb
  set complete+=s
  set bg=light
endfunction

command! ProseMode call ProseMode()
nmap \p :ProseMode<CR>

" Ack.vim
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif


" From https://jeffkreeftmeijer.com/vim-number/
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
augroup END

hi! LspDiagnosticsDefaultError guifg=#dc322f gui=bold,standout
hi! LspDiagnosticsDefaultWarning guifg=#b58900 gui=italic
hi! LspDiagnosticsDefaultInformation guifg=#2aa198 gui=italic
hi! LspDiagnosticsDefaultHint guifg=#2aa198 gui=italic cterm=italic

autocmd Filetype go setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4 nolist


" Language servers
lua << EOF
-- Scratch
vim.cmd('command! CargoCheck lua require("FTerm").scratch({ cmd = {"cargo", "check"} })')

-- tmux navigation 
require'nvim-tmux-navigation'.setup {
    disable_when_zoomed = true -- defaults to false
}
vim.api.nvim_set_keymap('n', "<C-h>", ":lua require'nvim-tmux-navigation'.NvimTmuxNavigateLeft()<cr>", { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', "<C-j>", ":lua require'nvim-tmux-navigation'.NvimTmuxNavigateDown()<cr>", { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', "<C-k>", ":lua require'nvim-tmux-navigation'.NvimTmuxNavigateUp()<cr>", { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', "<C-l>", ":lua require'nvim-tmux-navigation'.NvimTmuxNavigateRight()<cr>", { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', "<C-\\>", ":lua require'nvim-tmux-navigation'.NvimTmuxNavigateLastActive()<cr>", { noremap = true, silent = true })
vim.api.nvim_set_keymap('n', "<C-Space>", ":lua require'nvim-tmux-navigation'.NvimTmuxNavigateNext()<cr>", { noremap = true, silent = true })

-- local luasnip = require 'luasnip'
require("lsp-colors").setup({
  Error = "#dc322f",
  Warning = "#b58900",
  Information = "#268bd2",
  Hint = "#2aa198"
})

require'nvim-web-devicons'.setup({
 -- your personnal icons can go here (to override)
 -- DevIcon will be appended to `name`
 override = {
  zsh = {
    icon = "",
    color = "#428850",
    name = "Zsh"
  }
 };
 -- globally enable default icons (default to false)
 -- will get overriden by `get_icons` option
 default = true;
})

local tree_cb = require'nvim-tree.config'.nvim_tree_callback
require'nvim-tree'.setup({
  disable_netrw = false,
  view = {
    mappings = {
      list = {
        { key = {"C"}, cb = tree_cb("cd") }
      }
    }
  }
})

-- nvim-cmp setup
local cmp = require 'cmp'
cmp.setup {
  mapping = {
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
    ['<Tab>'] = function(fallback)
      print(vim.fn.pumvisible() ~= 1 or cmp.visible())
      if cmp.visible() then
        cmp.select_next_item()
      elseif vim.fn.pumvisible() ~= 0 then
        vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<C-n>', true, true, true), 'n')
      else
        fallback()
      end
    end,
    ['<S-Tab>'] = function(fallback)
      if cmp.visible() then
        cmp.select_prev_item()
      elseif vim.fn.pumvisible() == 1 then
        vim.fn.feedkeys(vim.api.nvim_replace_termcodes('<C-p>', true, true, true), 'n')
      else
        fallback()
      end
    end,
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'buffer' },
    { name = 'path' }
  },
}

local nvim_lsp = require('lspconfig')
nvim_lsp.rust_analyzer.setup{}
nvim_lsp.flow.setup{}
nvim_lsp.tsserver.setup{}
nvim_lsp.gopls.setup{}

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
--  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  -- buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  -- buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  -- buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  -- buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<f2>', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<leader>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<leader>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts) 
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts) 
  -- buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  -- buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { 'rust_analyzer', 'flow', 'tsserver', 'gopls' }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end
EOF
